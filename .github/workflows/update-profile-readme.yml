name: Update Profile README

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs weekly on Sunday at midnight
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout profile repository
        uses: actions/checkout@v3
        with:
          path: profile-repo
          repository: dougzilla32/dougzilla32
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install pygithub

      - name: Generate README from repositories
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          cat > update_readme.py << 'EOF'
          import os
          import re
          from github import Github
          import base64
          from datetime import datetime, timezone
          import glob
          import shutil

          # Initialize GitHub client
          token = os.environ['GITHUB_TOKEN']
          g = Github(token)
          user = g.get_user()

          def calculate_significance(repo):
              # Base score
              score = 0
              
              # Stars have high weight
              score += repo.stargazers_count * 10
              
              # Forks have medium weight
              score += repo.forks_count * 5
              
              # Recent activity (higher for newer repos)
              if repo.updated_at:
                  # Calculate days since last update
                  days_since_update = (datetime.now(timezone.utc) - 
                                      repo.updated_at).days
                  # More recent updates get higher scores (max 100)
                  score += max(0, 100 - days_since_update)
              
              # Size has some weight
              score += min(100, repo.size / 1000)  # Cap at 100 points for size
              
              # Custom tag in topics can override
              if 'significance:high' in repo.get_topics():
                  score += 1000
              elif 'significance:medium' in repo.get_topics():
                  score += 500
              elif 'significance:low' in repo.get_topics():
                  score -= 500
              
              # Non-forked repos get a boost
              if not repo.fork:
                  score += 100
                  
              # Private repos might be more significant for professional work
              if repo.private:
                  score += 50
              
              return score

          # Create directory for individual READMEs if it doesn't exist
          project_readmes_dir = 'profile-repo/project-readmes'
          os.makedirs(project_readmes_dir, exist_ok=True)

          # Track repositories to know which README files should be kept
          all_repo_names = set()
          private_repo_names = set()

          # Get all repositories and calculate significance
          repos_with_significance = []
          for repo in user.get_repos():
              # Skip forked repositories if desired
              if repo.fork:
                  continue
              
              all_repo_names.add(repo.name)
              if repo.private:
                  private_repo_names.add(repo.name)
                  
              # Calculate significance score
              significance = calculate_significance(repo)
              repos_with_significance.append((repo, significance))
              
          # Start building the main README content
          main_readme = f"# Doug Stein's GitHub Projects\n\n"
          main_readme += "Welcome to my GitHub profile! Below you'll find descriptions of my projects, including private repositories. "
          main_readme += "For public repositories, links go directly to the GitHub repository. "
          main_readme += "For private repositories, links go to documentation stored in this profile repository.\n\n"
          main_readme += "## Projects\n\n"
          
          # Sort repositories by significance (highest first)
          repos_with_significance.sort(key=lambda x: x[1], reverse=True)
          
          # Process each repository in order of significance
          for repo, significance in repos_with_significance:
              try:
                  # Get the repository description from the About section
                  description = repo.description or 'No description available'
                  
                  # Get repository topics/tags
                  topics = repo.get_topics()
                  
                  # Try to get the repository README content for the title
                  has_readme = False
                  title = repo.name
                  try:
                      readme_file = repo.get_readme()
                      readme_content = base64.b64decode(readme_file.content).decode('utf-8')
                      has_readme = True
                      
                      # Extract first heading for title, if available
                      title_match = re.search(r'# (.+?)\n', readme_content)
                      if title_match:
                          title = title_match.group(1)
                  except:
                      # No README available
                      readme_content = f"# {repo.name}\n\nNo README available for this repository."
                  
                  # Add to main README
                  if repo.private:
                      if has_readme:
                          # For private repos with README, link to local copy
                          main_readme += f"### [{title}](./project-readmes/{repo.name}.md)\n\n"
                      else:
                          # For private repos without README, just show the name without link
                          main_readme += f"### {title}\n\n"
                  else:
                      # For public repos, link directly to GitHub
                      main_readme += f"### [{title}]({repo.html_url})\n\n"
                  
                  main_readme += f"{description}\n\n"
                  
                  if topics:
                      main_readme += 'Technologies: ' + ', '.join(f'`{topic}`' for topic in topics) + '\n\n'
                      
                  # Note if it's private
                  if repo.private:
                      if has_readme:
                          main_readme += "> ðŸ”’ Private repository (documentation available)\n\n"
                      else:
                          main_readme += "> ðŸ”’ Private repository (no README available)\n\n"
                  else:
                      main_readme += f"[View Repository]({repo.html_url})\n\n"
                      
                  # Add a divider
                  main_readme += "---\n\n"
                  
                  # Only copy READMEs for private repositories that have them
                  if repo.private and has_readme:
                      # Modify the README content to include repository info at the top
                      repo_info = f"# {title}\n\n"
                      if description and description != 'No description available':
                          repo_info += f"{description}\n\n"
                      
                      repo_info += "> ðŸ”’ Private Repository\n\n"
                      
                      if topics:
                          repo_info += 'Technologies: ' + ', '.join(f'`{topic}`' for topic in topics) + '\n\n'
                          
                      repo_info += "---\n\n"
                      
                      # Save the individual README file, replacing the original title to avoid duplication
                      if title_match:
                          modified_readme = readme_content.replace(title_match.group(0), repo_info, 1)
                      else:
                          modified_readme = repo_info + readme_content
                      
                      with open(f'{project_readmes_dir}/{repo.name}.md', 'w') as f:
                          f.write(modified_readme)
                          
              except Exception as e:
                  print(f'Error processing {repo.name}: {str(e)}')
                  continue

          # Cleanup: Remove README files for repositories that no longer exist or are public
          # List all markdown files in the project_readmes directory
          existing_readme_files = glob.glob(f'{project_readmes_dir}/*.md')
          for readme_file in existing_readme_files:
              # Extract the repository name from the filename
              repo_name = os.path.basename(readme_file).replace('.md', '')
              
              # If the file is for a public repository or a repository that no longer exists, remove it
              if repo_name not in private_repo_names:
                  print(f"Removing README for public or removed repository: {repo_name}")
                  os.remove(readme_file)

          # Add footer to main README
          main_readme += f"\n\n*Last updated: {datetime.now().strftime('%Y-%m-%d')}*\n"
          main_readme += "\n\nThis profile is automatically generated from my repository information"

          # Write the main README file
          with open('profile-repo/README.md', 'w') as f:
              f.write(main_readme)
              
          # Print some info about the significance scores for debugging
          print("\nRepository Significance Scores:")
          for repo, score in repos_with_significance:
              print(f"{repo.name}: {score}")
              
          print("\nCleanup Summary:")
          print(f"Total repositories: {len(all_repo_names)}")
          print(f"Private repositories: {len(private_repo_names)}")
          print(f"Public repositories: {len(all_repo_names) - len(private_repo_names)}")
          EOF
          
          python update_readme.py

      - name: Commit and push if changed
        run: |
          cd profile-repo
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md project-readmes/
          git diff --quiet && git diff --staged --quiet || git commit -m "Update profile README and project documentation"
          git push